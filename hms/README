
USED PACKAGES
=============

The project uses logging, inspect, traceback, time, unittest and selenium packages.

ABOUT THE CODE
==============

This is a proof of concept (POC) project, to show how Python's object-oriented features could be used
to create a test framework, along with Selenium, about HMS Admin console.

The implementation drives to provide a Page Object Model structure.
For this, a base page is being provided from which some general functions are being inherited,
for example the start and open methods.
Beside those, a couple of Selenium-related methods are there in the base class, to enable getting
webElements by type, to send keys, to click on webElements and so on.

Another important aspect of the Page Object Model is how to get and how to pass around the webdriver.
In our case it is obtained in the Driver_Factory class. Then the actual test calls it,
thus creating a driver object.
The next step using the Page_Factory class, which is simply creating different 'pages' (actually page objects)
based on the name of the page. (In the future when new pages are being added, the Page_Factory should
also be updated.)
After creating the page, the test can call methods on that page - like calling the login() method
on the login page object.

LOCATORS
========

All locators are suggested to have inside hms/pages/locators.py, by their related class for easier maintenance.

LOGGING
=======

For logging a custom logging class is being used. You might want to monitor the hms/tests/automation.log file
to see the info and debug messages.
Regarding log levels: in general the methods in the base class will log events in debug mode
and the tests will use info level.

SENSITIVE_DATA
==============

The username/password is being stored in the hms/tests/test_data.txt file. Please do NOT commit it!
It is being read in the Login_Page class, utilizing the hms/utilities/file_reader.py Python file.

ABOUT WHERE TO VERIFY TESTS
===========================

There is a certain debate whether the page objects ot the actual tests should hold code,
checking the outcome of the actions by webdriver.
Both approaches work but the emphasis is being put in different places.
If the assertions are in the page objects, the actual test would become considerably shorter -
but the price for that is the QA folks, reading only the test, are somewhat in dark, what exactly happened,
meaning they have to dig deeper into the code - which contradict to the idea of the framework,
where the coder does not need to know about the inner workings of the framework.
The advantage of this approach is that the code super short, like:

login_object.verify_login()

On the other hand, when the verification resides inside the test, the code might be much longer. Example:
       if (login_object.login()):
            msg = "Login was successful"
            login_object.log.info(msg)
        else:
            msg = "Login failed"
            login_object.log.info(msg)
In this case the output after running the test could provide a clearer picture.

All in all I just wanted to bring up this so that we would debate about which approach we prefer.
